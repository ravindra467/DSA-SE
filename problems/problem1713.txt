b"Problem\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nThere are BBB blocks (numbered 111 through BBB) distributed in NNN containers (numbered 111 through NNN). For each valid iii, the weight of the iii-th block is WiW_iWi\xe2\x80\x8b kilograms.\nFor each container iii, you should decide if it will be used like a stack or a queue. At any time, a container may contain any sequence of blocks (possibly the empty sequence); let's denote the number of the jjj-th block (indexed from 111) in the iii-th container by Ai,jA_{i,j}Ai,j\xe2\x80\x8b.\nA stack is a data structure that stores a sequence of integers (X1,X2,\xe2\x80\xa6,XM)(X_1, X_2, \\ldots, X_M)(X1\xe2\x80\x8b,X2\xe2\x80\x8b,\xe2\x80\xa6,XM\xe2\x80\x8b) and supports two types of instructions:\n\npop: Remove the last element of the sequence. After this instruction, the sequence becomes (X1,\xe2\x80\xa6,XM\xe2\x88\x921)(X_1, \\ldots, X_{M-1})(X1\xe2\x80\x8b,\xe2\x80\xa6,XM\xe2\x88\x921\xe2\x80\x8b); it must be non-empty before this instruction. The return value of this instruction is XMX_MXM\xe2\x80\x8b.\npush a: Add an element aaa at the end of the sequence. After this instruction, the sequence becomes (X1,\xe2\x80\xa6,XM,a)(X_1, \\ldots, X_M, a)(X1\xe2\x80\x8b,\xe2\x80\xa6,XM\xe2\x80\x8b,a).\n\nSimilarly, a queue is a data structure that stores a sequence of integers (X1,X2,\xe2\x80\xa6,XM)(X_1, X_2, \\ldots, X_M)(X1\xe2\x80\x8b,X2\xe2\x80\x8b,\xe2\x80\xa6,XM\xe2\x80\x8b) and supports two types of instructions:\n\npop: Remove the first element of the sequence. After this instruction, the sequence becomes (X2,\xe2\x80\xa6,XM)(X_2, \\ldots, X_M)(X2\xe2\x80\x8b,\xe2\x80\xa6,XM\xe2\x80\x8b); it must be non-empty before this instruction. The return value of this instruction is X1X_1X1\xe2\x80\x8b.\npush a: Add an element aaa at the end of the sequence. After this instruction, the sequence becomes (X1,\xe2\x80\xa6,XM,a)(X_1, \\ldots, X_M, a)(X1\xe2\x80\x8b,\xe2\x80\xa6,XM\xe2\x80\x8b,a).\n\nFor each valid iii, it takes Ci\xe2\x8b\x85wC_i \\cdot wCi\xe2\x80\x8b\xe2\x8b\x85w nanoseconds to pop a block with weight www from the container iii and Di\xe2\x8b\x85wD_i \\cdot wDi\xe2\x80\x8b\xe2\x8b\x85w nanoseconds to push a block with weight www to the container iii.\nUsing the given data structures, you may perform the following operation at most B2/2B^2/2B2/2 times: choose two containers c1c_1c1\xe2\x80\x8b and c2c_2c2\xe2\x80\x8b (c1\xe2\x89\xa0c2c_1 \\neq c_2c1\xe2\x80\x8b\xee\x80\xa0=c2\xe2\x80\x8b), pop a block from the c1c_1c1\xe2\x80\x8b-th container and then push this block to the c2c_2c2\xe2\x80\x8b-th container.\nYour task is to sort all the blocks in a single container, i.e. after performing all operations, the sequence of blocks in some container must be (1,2,\xe2\x80\xa6,B)(1, 2, \\ldots, B)(1,2,\xe2\x80\xa6,B). The time spent performing operations should be as small as possible.\nInput\n\nThe first line of the input contains two space-separated integers NNN and BBB.\nThe second line contains NNN space-separated integers C1,C2,\xe2\x80\xa6,CNC_1, C_2, \\ldots, C_NC1\xe2\x80\x8b,C2\xe2\x80\x8b,\xe2\x80\xa6,CN\xe2\x80\x8b.\nThe third line contains NNN space-separated integers D1,D2,\xe2\x80\xa6,DND_1, D_2, \\ldots, D_ND1\xe2\x80\x8b,D2\xe2\x80\x8b,\xe2\x80\xa6,DN\xe2\x80\x8b.\nThe fourth line contains BBB space-separated integers W1,W2,\xe2\x80\xa6,WBW_1, W_2, \\ldots, W_BW1\xe2\x80\x8b,W2\xe2\x80\x8b,\xe2\x80\xa6,WB\xe2\x80\x8b.\nThe next NNN lines describe the initial distribution of blocks in containers. For each valid iii, the iii-th of these lines contains an integer MMM denoting the number of blocks which are initially in the iii-th container, followed by a space and MMM space-separated integers Ai,1,Ai,2,\xe2\x80\xa6,Ai,MA_{i,1}, A_{i,2}, \\ldots, A_{i,M}Ai,1\xe2\x80\x8b,Ai,2\xe2\x80\x8b,\xe2\x80\xa6,Ai,M\xe2\x80\x8b denoting the sequence of blocks which are initially in this container.\n\nOutput\n\nFirst, print a line containing a string with length NNN. For each valid iii, the iii-th character of this string should be either 'S' if the iii-th sequence is used as a stack or 'Q' if it is used as a queue.\nThen, print a line containing a single integer QQQ \xe2\x80\x95 the number of operations to perform.\nFinally, print QQQ lines. Each of these lines should contain two space-separated integers c1c_1c1\xe2\x80\x8b and c2c_2c2\xe2\x80\x8b describing an operation that pops an element from the c1c_1c1\xe2\x80\x8b-th container and pushes it into the c2c_2c2\xe2\x80\x8b-th container.\n\nConstraints\n\n2\xe2\x89\xa4N\xe2\x89\xa41282 \\le N \\le 1282\xe2\x89\xa4N\xe2\x89\xa4128\nB=1,024B = 1,024B=1,024\n1\xe2\x89\xa4Ci,Di\xe2\x89\xa4501 \\le C_i, D_i \\le 501\xe2\x89\xa4Ci\xe2\x80\x8b,Di\xe2\x80\x8b\xe2\x89\xa450 for each valid iii\n1\xe2\x89\xa4Wi\xe2\x89\xa4501 \\le W_i \\le 501\xe2\x89\xa4Wi\xe2\x80\x8b\xe2\x89\xa450 for each valid iii\n0\xe2\x89\xa4M\xe2\x89\xa4B0 \\le M \\le B0\xe2\x89\xa4M\xe2\x89\xa4B\n1\xe2\x89\xa4Ai,j\xe2\x89\xa4B1 \\le A_{i,j} \\le B1\xe2\x89\xa4Ai,j\xe2\x80\x8b\xe2\x89\xa4B for each valid i,ji,ji,j\n\nExample Input\n3 4\r\n1 2 3\r\n1 2 3\r\n2 1 4 3\r\n2 3 2\r\n1 1\r\n1 4\n\nExample Output\nQQS\r\n4\r\n1 3\r\n1 2\r\n4 2\r\n4 2\n\nExplanation\nThe first two containers are used as queues and the third container as a stack. The sequences change as follows:\n\nInitially: (3,2),(1),(4)(3,2), (1), (4)(3,2),(1),(4).\nAfter the first operation: (2),(1),(4,3)(2), (1), (4,3)(2),(1),(4,3).\nAfter the second operation: (),(1,2),(4,3)(), (1,2), (4,3)(),(1,2),(4,3).\nAfter the third operation: (),(1,2,3),(4)(), (1,2,3), (4)(),(1,2,3),(4).\nAfter the fourth operation: (),(1,2,3,4),()(), (1,2,3,4), ()(),(1,2,3,4),().\n\nTest Generation\nThe source code used to generate test data can be downloaded here.\n\nNNN can be 161616, 323232, 646464 or 128128128.\nAll values of CiC_iCi\xe2\x80\x8b, DiD_iDi\xe2\x80\x8b and WiW_iWi\xe2\x80\x8b are chosen uniformly randomly and independently between 111 and 505050 inclusive.\nA permutation of the integers 111 through BBB is chosen uniformly randomly. The blocks are pushed to the containers one by one in this order.\nOne of the following two initial distribution schemes is chosen:\n\nAll BBB blocks are pushed into the 111-st container.\nFor each block, a container into which it is pushed is chosen uniformly randomly and independently.\n\n\nThere are eight test files \xe2\x80\x95 one for each possible value of NNN and distribution scheme.\n\nScoring\nIf your output is invalid (in particular if you attempt to pop an empty container), you do not sort the blocks in a single container or you use more than B2/2B^2/2B2/2 operations, you will receive the Wrong Answer verdict.\nOtherwise, the score of a test file is the number of nanoseconds spent performing your operations. The score of a submission is the sum of scores of all test files. Your goal is to minimise the score of your submission.\nThere are eight test files. During the contest, the displayed score will account for exactly four test files, i.e. your score reflects your submission's performance on 50% (4/8) of the test files; However, if your program gets a non-AC verdict on any test file, your submission's verdict will be non-AC. In other words, an AC verdict denotes that your program runs successfully on all the test files. After the end of the contest, your score will be changed to include the sum of your program's scores over the other 4 test files."