b'Problem\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nChef is on an adventure to find the tastiest exotic spices. Everyone knows that the best spices are guarded by several ancient dragons that dwell within mountains.\nThe mountain range can be modeled by a polyline in the 2D xzxzxz plane that passes through NNN points p1=(1,h1),p2=(2,h2),\xe2\x80\xa6,pN=(N,hN)p_1 = (1,h_1), p_2 = (2, h_2), \\ldots, p_N = (N, h_N)p1\xe2\x80\x8b=(1,h1\xe2\x80\x8b),p2\xe2\x80\x8b=(2,h2\xe2\x80\x8b),\xe2\x80\xa6,pN\xe2\x80\x8b=(N,hN\xe2\x80\x8b), in this order, where hih_ihi\xe2\x80\x8b is a positive integer for each valid iii. This polyline divides the set of points {(x,z):1\xe2\x89\xa4x\xe2\x89\xa4N}\\{(x, z): 1 \\le x \\le N\\}{(x,z):1\xe2\x89\xa4x\xe2\x89\xa4N} into two regions. The "solid" part of the mountain range is the "bottom" region, i.e. the region that contains the xxx-axis (the x-axis is the line z=0z=0z=0).\nA dragon\'s den is located at each of the NNN points. For each valid iii, the den at the point pip_ipi\xe2\x80\x8b initially contains a pile of spices with tastiness aia_iai\xe2\x80\x8b. With a technique he learned from dragons, Chef can glide from den to den, tasting all of the spices along the way. The tastiness of an entire journey is the summed up tastiness of spices over all dens visited during the journey. However, there are some restrictions:\n\nChef can only glide from a higher den to a strictly lower den, i.e. if he glides from a den at pip_ipi\xe2\x80\x8b to a den at pjp_jpj\xe2\x80\x8b, then hi>hjh_i \\gt h_jhi\xe2\x80\x8b>hj\xe2\x80\x8b must hold.\nChef can only glide in one direction and never look back, i.e. if he starts travelling in the direction of decreasing xxx, he must keep travelling in that direction until the end of the journey, and if he starts travelling in the direction of increasing xxx, he must keep travelling in that direction until the end of the journey too.\nChef cannot travel through solid mountain, i.e. he can only glide from a den at pip_ipi\xe2\x80\x8b to a den at pjp_jpj\xe2\x80\x8b if the line segment connecting the points pip_ipi\xe2\x80\x8b and pjp_jpj\xe2\x80\x8b does not intersect the "solid" part of the mountain range. However, it may touch the border of the mountain range, i.e. the polyline itself.\n\nNote that gliding is the only way for Chef to travel between dens.  It is valid for a journey to begin and end at the same den, in which case Chef tastes the spices at the den and nothing else.\nSee the explanation of the sample test case for a concrete example.\nWith that in mind, Chef needs you to process QQQ queries. There are two types of queries:\n\n1 b k: Chef changes his mind and decides that the tastiness of the spices in the den at the point pbp_bpb\xe2\x80\x8b should be changed to kkk instead.\n2 b c: Chef wants to start a journey at the den located at pbp_bpb\xe2\x80\x8b and end it at the den located at pcp_cpc\xe2\x80\x8b. Find the maximum possible tastiness of such a journey or determine that no such journey exists.\n\nInput\n\nThe first line of the input contains two space-separated integers NNN and QQQ.\nThe second line contains NNN space-separated integers h1,h2,\xe2\x80\xa6,hNh_1, h_2, \\ldots, h_Nh1\xe2\x80\x8b,h2\xe2\x80\x8b,\xe2\x80\xa6,hN\xe2\x80\x8b.\nThe third line contains NNN space-separated integers a1,a2,\xe2\x80\xa6,aNa_1, a_2, \\ldots, a_Na1\xe2\x80\x8b,a2\xe2\x80\x8b,\xe2\x80\xa6,aN\xe2\x80\x8b.\nThen, QQQ lines follow. Each of these lines contains three space-separated integers describing a query in the above format.\n\nOutput\nFor each query of the second type, print a single line containing one integer \xe2\x80\x95 the maximum tastiness of a journey or \xe2\x88\x921-1\xe2\x88\x921 if no valid journey exists.\nConstraints\n\n1\xe2\x89\xa4N,Q\xe2\x89\xa42\xe2\x8b\x851051 \\le N,Q \\le 2 \\cdot 10^51\xe2\x89\xa4N,Q\xe2\x89\xa42\xe2\x8b\x85105\n1\xe2\x89\xa4hi\xe2\x89\xa41091 \\le h_i \\le 10^91\xe2\x89\xa4hi\xe2\x80\x8b\xe2\x89\xa4109 for each valid iii\n1\xe2\x89\xa4ai\xe2\x89\xa41091 \\le a_i \\le 10^91\xe2\x89\xa4ai\xe2\x80\x8b\xe2\x89\xa4109 for each valid iii\n1\xe2\x89\xa4b,c\xe2\x89\xa4N1 \\le b, c \\le N1\xe2\x89\xa4b,c\xe2\x89\xa4N\n1\xe2\x89\xa4k\xe2\x89\xa41091 \\le k \\le 10^91\xe2\x89\xa4k\xe2\x89\xa4109\n\nSubtasks\nSubtask 1 (10 points): N,Q\xe2\x89\xa41,000N, Q \\le 1,000N,Q\xe2\x89\xa41,000\nSubtask 2 (35 points): there are no queries of the first type\nSubtask 3 (55 points): original constraints\nSample 1:\nInputOutput5 4\n3 1 4 1 5\n1 2 4 8 16\n2 5 2\n1 3 5\n2 3 4\n2 1 422\n13\n-1\nExplanation:\nHere is an illustration of the mountain range described in the first sample test case.\n\n\nQuery 1: Starting at p5p_5p5\xe2\x80\x8b (height 555), Chef can glide to p3p_3p3\xe2\x80\x8b (height 4) and then to p2p_2p2\xe2\x80\x8b (height 111). The total tastiness of this journey is a5+a3+a2=16+4+2=22a_5+a_3+a_2=16+4+2=22a5\xe2\x80\x8b+a3\xe2\x80\x8b+a2\xe2\x80\x8b=16+4+2=22.\n\n\n\nQuery 2: The value of a3a_3a3\xe2\x80\x8b is set to 555.\nQuery 3: Chef glides from p3p_3p3\xe2\x80\x8b to p4p_4p4\xe2\x80\x8b. The tastiness is a3+a4=5+8=13a_3+a_4=5+8=13a3\xe2\x80\x8b+a4\xe2\x80\x8b=5+8=13.\nQuery 4: It is impossible to get from p1p_1p1\xe2\x80\x8b to p4p_4p4\xe2\x80\x8b. Even if h1>h4h_1 \\gt h_4h1\xe2\x80\x8b>h4\xe2\x80\x8b, to reach p4p_4p4\xe2\x80\x8b, Chef would need to fly either upwards or through the mountain, both of which are impossible.\n\n\n'