b'Problem\nWith the helpful alien Chitti by your side, you finally have hope to repair the glitching time machine. As you have experienced before, the machine takes you to certain unpredictable timelines with every jump.\nProf Paradox tells you that the machine can jump to NNN different timelines and gives you N\xe2\x88\x921N-1N\xe2\x88\x921 pairs of timelines which can be reached from one another in a single jump. He also tells you that every timeline can be reached by every other timeline in a finite number of jumps. Each timeline has a paradox value of AiAiAi. Chitti offers to help you. But, for that you need to gather some parts to construct a new time machine.\nChitti first gives you a binary variable SSS, that denotes if the time machine is stable (S=0S=0S=0) or unstable (S=1S=1S=1).\nIf S=0S = 0S=0, no new parts are required to fix the machine and hence you can proceed with the same map of timelines.\nIf S=1S = 1S=1, we require some parts to construct a new time machine and generate a new map. For this, the existing time machine generates a random permutation PPP of NNN timelines.\nGuidelines to design the map:\nFor any valid iii, (1&lt;=i\\lt=n), from Pi\xe2\x88\x92thPi-thPi\xe2\x88\x92th timeline, you have to visit all the reachable timelines, collect some parts and come back. Since, backward jumps form a rip in the fabric of time, all the adjacent timelines of PiPiPi get disconnected in such a way that you can jump to the adjacent timelines from PiPiPi but can\xe2\x80\x99t return.\nNow you have the parts, but the rip in time is permanent. So, you need a new map to navigate your way home. Chitti tells you that you have to follow the given rules to design your new map:\n\n\nEvery node should be able to reach any node in its subtree using a finite number of forward jumps.\n\n\nEvery node should not be able to reach any node that is not present in its subtree using forward jumps.\n\n\nHowever if S=0S = 0S=0 , the old design is retained.\n\n\nNow to make the time machine work, Chitti has QQQ queries. For each query, he gives you two nodes uuu and vvv, and asks for XORXORXOR of the paradox values of all the timelines except the ones that lie in the path between uuu and vvv [Inclusive].\nCan you give Chitti the necessary information to repair your time machine and finally return home?\nNote:Note :Note:\n\nIf SSS = 111, the initial timeline in the new map of timelines is to be decided by you.\nIf SSS = 000, consider the initial timeline to be 111.\nOnce the new map is constructed completely , You can assume it to be Undirectional, i.e; for\nevery adjacent pair of timelines in the map, both forward and backward jumps are possible.\nThe Queries have to be performed over the new map.\n\nInput:\n\nFirst line will contain TTT, number of testcases. Then the testcases follow.\nFirst line of each testcase contains of a single line of input, two integers N,QN, QN,Q.\nSecond line of each testcase contains NNN spaced integers denoting the paradox value of each\nTimeline.\nNext you have N\xe2\x88\x921N-1N\xe2\x88\x921 lines containing a pair of integers denoting the Timelines for which both\nforward and backward jumps are possible.\nNext line contains a integer SSS  which can take only 000 or 111.\nNext line of contains a permutation of 111 to NNN only if S=1S=1S=1 else thsi line is omitted.\nThen you have QQQ lines containing a pair of integers denoting the Timelines for which you\nhave to calculate the answers.\n\nOutput:\nFor each Query, output in a single line XORXORXOR of paradox values of all Timelines except the ones that lie in the path of  uuu and vvv inclusive in the new design. .\nConstraints\n\n1\xe2\x89\xa4T\xe2\x89\xa42001 \\leq T \\leq 2001\xe2\x89\xa4T\xe2\x89\xa4200\n2\xe2\x89\xa4N\xe2\x89\xa41052 \\leq N \\leq 10^52\xe2\x89\xa4N\xe2\x89\xa4105\n1\xe2\x89\xa4Q\xe2\x89\xa41051 \\leq Q \\leq 10^51\xe2\x89\xa4Q\xe2\x89\xa4105\n1\xe2\x89\xa4A[i]\xe2\x89\xa41091 \\leq A[i] \\leq 10^91\xe2\x89\xa4A[i]\xe2\x89\xa4109\nS=0S=0S=0 or S=1S=1S=1\n\nSubtask 1: (10 pts)\n\n1\xe2\x89\xa4T\xe2\x89\xa42001 \\leq T \\leq 2001\xe2\x89\xa4T\xe2\x89\xa4200\n2\xe2\x89\xa4N\xe2\x89\xa4502 \\leq N \\leq 502\xe2\x89\xa4N\xe2\x89\xa450\n1\xe2\x89\xa4Q\xe2\x89\xa4501 \\leq Q \\leq 501\xe2\x89\xa4Q\xe2\x89\xa450\n1\xe2\x89\xa4A[i]\xe2\x89\xa41001 \\leq A[i] \\leq 1001\xe2\x89\xa4A[i]\xe2\x89\xa4100\nS=0S=0S=0\n\nSubtask 2: (20 pts)\n\n1\xe2\x89\xa4T\xe2\x89\xa4501 \\leq T \\leq 501\xe2\x89\xa4T\xe2\x89\xa450\n2\xe2\x89\xa4N\xe2\x89\xa41052 \\leq N \\leq 10^52\xe2\x89\xa4N\xe2\x89\xa4105\n1\xe2\x89\xa4Q\xe2\x89\xa41051 \\leq Q \\leq 10^51\xe2\x89\xa4Q\xe2\x89\xa4105\n1\xe2\x89\xa4A[i]\xe2\x89\xa41061 \\leq A[i] \\leq 10^61\xe2\x89\xa4A[i]\xe2\x89\xa4106\nS=0S=0S=0\n\nSubtask 3: (20 pts)\n\n1\xe2\x89\xa4T\xe2\x89\xa41001 \\leq T \\leq 1001\xe2\x89\xa4T\xe2\x89\xa4100\n2\xe2\x89\xa4N\xe2\x89\xa410002 \\leq N \\leq 10002\xe2\x89\xa4N\xe2\x89\xa41000\n1\xe2\x89\xa4Q\xe2\x89\xa410001 \\leq Q \\leq 10001\xe2\x89\xa4Q\xe2\x89\xa41000\n1\xe2\x89\xa4A[i]\xe2\x89\xa41061 \\leq A[i] \\leq 10^61\xe2\x89\xa4A[i]\xe2\x89\xa4106\n\nSubtask 4: (50 pts)\n\nOriginal Constraints\n\nSample Input:\n1\n10 4\n6 7 8 3 10 9 5 7 1 7\n4 10\n2 10\n3 7\n6 3 \n9 6\n7 8\n3 10\n9 5\n7 1\n1\n4 8 9 5 2 10 7 6 3 1\n4 4\n2 10\n6 10\n3 3\n\nSample Output:\n14\n13\n6\n5\n'