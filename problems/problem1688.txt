b"Problem\nRead problem statements in Mandarin, Bengali, and Russian as well.\nYou are handed a binary string SSS, but not in any ordinary form. Instead of being directly given the value of SSS, you are given an array CCC of size NNN representing the 01-compression representation of SSS. This means SSS first contains C1C_1C1\xe2\x80\x8b 0\\texttt{0}0 characters, then C2C_2C2\xe2\x80\x8b 1\\texttt{1}1 characters, then C3C_3C3\xe2\x80\x8b 0\\texttt{0}0 characters, and so on. For example, the array C=[2,3,4,3]C = [2, 3, 4, 3]C=[2,3,4,3] corresponds with the binary string 001110000111\\texttt{001110000111}001110000111.\nYou are allowed to modify SSS by swapping elements of CCC. More specifically, you are allowed to swap CiC_iCi\xe2\x80\x8b and CjC_jCj\xe2\x80\x8b as long as CiC_iCi\xe2\x80\x8b and CjC_jCj\xe2\x80\x8b both encodes blocks of the same character. For example, from C=[2,3,4,3]C = [2, 3, 4, 3]C=[2,3,4,3], you can swap C1C_1C1\xe2\x80\x8b and C3C_3C3\xe2\x80\x8b because both of them encode blocks of 0\\texttt{0}0's, turning CCC to [4,3,2,3][4, 3, 2, 3][4,3,2,3] and SSS to 000011100111\\texttt{000011100111}000011100111. However, you cannot swap C1C_1C1\xe2\x80\x8b and C2C_2C2\xe2\x80\x8b because C1C_1C1\xe2\x80\x8b encodes a block of 0\\texttt{0}0's, while C2C_2C2\xe2\x80\x8b encodes a block of 1\\texttt{1}1s.\nPerform the swapping operation in any way as many times as you want (including zero times) so that the final string SSS has as many 01\\texttt{01}01 subsequences as possible. As a reminder, a subsequence of a string is a sequence that can be derived by deleting zero or more characters without changing the order of the remaining characters.\nYou need to find any optimal final array CCC, for which the number of 01\\texttt{01}01 subsequence will be the largest possible.\nInput Format\n\nThe first line contains TTT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains a single integer NNN - the size of the array CCC.\nThe second line of each test case contains NNN integers C1,C2,\xe2\x80\xa6,CNC_1, C_2, \\dots, C_NC1\xe2\x80\x8b,C2\xe2\x80\x8b,\xe2\x80\xa6,CN\xe2\x80\x8b - the 01\\texttt{01}01-compression representation of SSS.\n\nOutput Format\nFor each test case, output two lines: the first line contains NNN integers representing the optimal array CCC, and the second line contains the maximum number of 01\\texttt{01}01 subsequences.\nConstraints\n\n\n1\xe2\x89\xa4T\xe2\x89\xa410001 \\leq T \\leq 10001\xe2\x89\xa4T\xe2\x89\xa41000\n1\xe2\x89\xa4N\xe2\x89\xa41001 \\leq N \\leq 1001\xe2\x89\xa4N\xe2\x89\xa4100\n1\xe2\x89\xa4Ci\xe2\x89\xa410001 \\leq  C_i \\leq 10001\xe2\x89\xa4Ci\xe2\x80\x8b\xe2\x89\xa41000\n\n\nSample 1:\nInputOutput1\n4\n2 3 4 34 3 2 3\n30\nExplanation:\n\nTest case 111: C=[2,3,4,3]C = [2, 3, 4, 3]C=[2,3,4,3], which means SSS corresponds to 001110000111\\texttt{001110000111}001110000111. The optimal list of operations is to only swap C1C_1C1\xe2\x80\x8b and C3C_3C3\xe2\x80\x8b, resulting in C=[4,3,2,3]C = [4, 3, 2, 3]C=[4,3,2,3] and S=S = S= 000011100111\\texttt{000011100111}000011100111, which has 303030 subsequences of 01\\texttt{01}01.\n"