b'Problem\nChef has a binary string SSS of length NNN. He wonders if it is possible to divide SSS into exactly KKK non-empty substrings such that each SiS_iSi\xe2\x80\x8b belongs to exactly one substring and the XOR\\texttt{XOR}XOR of each substring is the same. Can you help Chef to determine if it is possible to do so?\nNote: XOR\\texttt{XOR}XOR of substring SL\xe2\x8b\xafRS_{L \\cdots R}SL\xe2\x8b\xafR\xe2\x80\x8b is defined as: XOR(SL\xe2\x8b\xafR)=SL\xe2\x8a\x95SL+1\xe2\x8a\x95\xe2\x8b\xaf\xe2\x8a\x95SR\\texttt{XOR} (S_{L \\cdots R}) = S_L \\oplus S_{L+1} \\oplus \\cdots \\oplus S_RXOR(SL\xe2\x8b\xafR\xe2\x80\x8b)=SL\xe2\x80\x8b\xe2\x8a\x95SL+1\xe2\x80\x8b\xe2\x8a\x95\xe2\x8b\xaf\xe2\x8a\x95SR\xe2\x80\x8b.\nHere, \xe2\x8a\x95\\oplus\xe2\x8a\x95 denotes the bitwise XOR operation.\nInput Format\n\nThe first line contains a single integer TTT - the number of test cases. Then the test cases follow.\nThe first line of each test case contains two integers NNN and KKK - the length of the binary string SSS and the number of substrings in which SSS has to be divided.\nThe second line of each test case contains a binary string SSS of length NNN containing 000s and 111s only.\n\nOutput Format\nFor each test case, output YES if SSS can be divided into KKK substrings such that XOR\\texttt{XOR}XOR of each substring is the same. Otherwise, output NO.\nYou may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).\nConstraints\n\n\n1\xe2\x89\xa4T\xe2\x89\xa41051 \\leq T \\leq 10^51\xe2\x89\xa4T\xe2\x89\xa4105\n1\xe2\x89\xa4K\xe2\x89\xa4N\xe2\x89\xa41051 \\leq K \\le N \\leq 10^51\xe2\x89\xa4K\xe2\x89\xa4N\xe2\x89\xa4105\nSum of NNN over all test cases does not exceed 2\xe2\x8b\x851052 \\cdot 10^52\xe2\x8b\x85105\n\n\nSample 1:\nInputOutput4\n3 2\n111\n5 3\n01100\n8 3\n01001111\n6 2\n000100\nNO\nYES\nYES\nNO\n\nExplanation:\nTest case 1: It can be proven that there is no way to divide S=111S = 111S=111 into K=2K = 2K=2 substrings such that XOR\\texttt{XOR}XOR of each substring is the same.\nTest case 2: One of the possible ways of dividing SSS is: 0\xe2\x80\xbe\\underline{0}0\xe2\x80\x8b 11\xe2\x80\xbe\\underline{11}11\xe2\x80\x8b 00\xe2\x80\xbe\\underline{00}00\xe2\x80\x8b. Here XOR\\texttt{XOR}XOR of each substring is 000.\nTest case 3: One of the possible ways of dividing SSS is: 01\xe2\x80\xbe\\underline{01}01\xe2\x80\x8b 001\xe2\x80\xbe\\underline{001}001\xe2\x80\x8b 111\xe2\x80\xbe\\underline{111}111\xe2\x80\x8b. Here XOR\\texttt{XOR}XOR of each substring is 111.\nTest case 4: It can be proven that there is no way to divide S=000100S = 000100S=000100 into K=2K = 2K=2 substrings such that XOR\\texttt{XOR}XOR of each substring is the same.'