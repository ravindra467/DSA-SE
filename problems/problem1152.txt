b"Problem\n Read problems statements in Mandarin Chinese  , Russian and Vietnamese\nYou are given a string S, made of lowercase Latin letters.\nYou are also given a wildcard string T, containing lowercase latin letters and asterisks (symbol *).\nBoth the strings are 1-indexed.\nWildcard string T is said to generate a string P if and only if P can be obtained from T by replacing all the asterisks with arbitrary (possibly empty) lowercase Latin letter strings.\nConsider the ith symbol of the string S. Let's calculate the smallest index pi \xe2\x89\xa5 i such that the substring Si...Spi contains at least one of the strings generated by wildcard string T. In case any such index pi doesn't exist, then pi = -1.\nYour goal is to calculate all the values p1, p2, ... , p|S|.\nInput\nThe first line of input contains an integer Tn denoting the number of test cases. The description of Tn test cases follows.\nThe first line of each test case contains a wildcard string T.\nThe second line of the test case contains a lowercase Latin string S.\nOutput\nFor each test case, output a single line containing |S| space-separated integers, denoting p1, p2, ..., p|S|.\nConstraints\n\n1 \xe2\x89\xa4 T \xe2\x89\xa4 102\nSubtask 1 (33 points) : 1 \xe2\x89\xa4 sum of all |S|, sum of all |T| over a single test case \xe2\x89\xa4 103, 1 \xe2\x89\xa4 |S|, |T| \xe2\x89\xa4 102\nSubtask 2 (33 points) : 1 \xe2\x89\xa4 sum of all |S|, sum of all |T| over a single test case \xe2\x89\xa4 105, 1 \xe2\x89\xa4 |S|, |T| \xe2\x89\xa4 103\nSubtask 3 (34 points) : 1 \xe2\x89\xa4 sum of all |S|, sum of all |T| over a single test case \xe2\x89\xa4 105, 1 \xe2\x89\xa4 |S|, |T| \xe2\x89\xa4 105\nTotal number of asterisks over all the test cases is at most 500.\n\nExample\nInput:\n2\n*a*\nabacaba\n*a*b*\nabacaba\nOutput:\n1 3 3 5 5 7 7\n2 6 6 6 6 -1 -1\n\nExplanation\nExample case 1. Let us show that for every index i the value of pi is correct:\n\np1 = 1. The corresponding substring a contains the string a. String a can be generated by replacing both asterisks with empty strings.\np2 = 3. The corresponding substring ba contains the string a.\np3 = 3. The corresponding substring a contains the string a.\np4 = 5. The corresponding substring ca contains the string ca. The string ca can be obtained if we replace the first asterisk with c and the second one with an empty string.\np5 = 5. The corresponding substring a contains the string a.\np6 = 7. The corresponding substring ba contains the string ba. The string ba can be obtained if we replace the first asterisk with b and the second one with an empty string.\np7 = 7. The corresponding substring a contains the string a.\n\n\nExample case 2. Again, let's check for every i.\n\np1 = 2. The corresponding substring ab contains ab. The string ab can be obtained if we replace all the asterisks with empty strings.\np2 = 6. The corresponding substring bacab contains acab. The string acab can be obtained if we replace the first asterisk with an empty string, the second one with the string ca and the third one with an empty string.\np3 = 6. The corresponding substring acab contains ab. \np4 = 6. The corresponding substring cab contains cab. The string cab can be obtained if you replace the first asterisk with c, and the rest with empty strings. \np5 = 6. The corresponding substring ab contains ab.\np6 = p7 = -1. Neither ba nor a doesn't contain any substring, generated by *a*b*.\n\n\nYou may have noted that in the explanation for the second test case, ab is also a correct substring generated by T for some positions, but some other string is listed. This is done on purpose, in order to show how the string T can generate various strings.\n"