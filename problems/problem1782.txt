b"Problem\nProblem Name :\nJustify Lines## Problem Definition :\n\n\nCodecell team is creating their own Cheetah text editor, and they need a blazing fast algorithm to help them justify lines.\nJustify means, that the words and whitespace in a line, stretches the whole width of the line.\nAlso, the team is aiming for flush left and right here, that means the starting and ending character of the line, will be anything except whitespace.\nAlso, the text editor uses monospace fonts, which basically means, all the characters will of equal width.\nWhile distributing whitespaces, to make the document look prettier, one must distribute the extra whitespaces between longer words\nAnd if there are multiple whitespaces around which the sum of words is equal, start from the whitespace near the start of sentence\nMove to next line if words don't fit in the line\nIf only single word in the line, align it to the left\nThe maximum width of the line will be always equal to or greater than the longest word\nAlso, note that there should be minimum of one whitespace between two words\n\nRef: Justify\nInput :\n\nFirst line contains n, the number of lines to justify\nContains the x, the number of words in the line, and m the width of the line\nnext x lines, contain a word each## Output :\nPrint the justified lines for the given input\n\nConstraints :\n\n1 <= n <= 1000\n1 <= x <= 1000\n3 <= m <= 10002\n\nExample :### Input :\n    3\n    6 10\n    I\n    am\n    the\n    one\n    who\n    knocks\n    5 20\n    All\n    arrays\n    start\n    from\n    one\n    1 10\n    Covfefe\n\nOutput :\n    I  am  the \n    one    who \n    knocks\n    All   arrays   start\n    from             one \n    Covfefe\n\nExplanation :\n\nFor the first case, the width of the line is 10, so we go by calculating width, when there is only one space, which is the minimum required between them\nI am the one who knocks in this case, total width is 23, so we will shift to newline whenever the counting surpases the width limit, in this case 10\nSo, we obtain 3 lines, in this scenario-\n\n\nI am the width 8\n\n\n\n\none who width 7\n\n\n\n\nknocks width 6\n\n\nNow, while distributing white spaces for each line, we rank the spaces between the words, using a simple algorithm, that is the sum of length of words surrounding it.\nSo, in the first line, the first space is ranked 2 (sum of words around it is 3), while the next one is ranked 1 (sum of words around it is 5), and while distributing we start distributing from rank 1, and move to other ranks, and cycle through them, untill the whole width of the line is consumed\nIf same sum, lower rank given to the space on the left side.\nDoing this, for each line, and for the last line, as it has only one word, left align it and no whitespace later.\n"