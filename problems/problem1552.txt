b"Problem\nDavid is a computer science student who loves his future profession. He is one of those who think that trees grow down, not up.\nDavid likes connected undirected acyclic graphs, also known as trees. He especially likes solving problems about trees. Recently David found a piece of paper with a tree with N vertices drawn on it. He also found M queries on the same piece of paper, where each query was a non-empty list of some vertices of this tree. For each query, it was asked to find the number of vertices in the tree (which didn't belong to the list) such that if you removed this vertex and all edges incident to it from the tree, then all vertices from the list would belong to pairwise different connected components.\nDavid spent seven unhappy days and six sleepless nights trying to solve this problem efficiently. He is still trying. As you're known to be a good problem solver, David's friend asked for your help. David won't sleep until he knows the answer to each query. Write a program which answers all the queries correctly.\nInput\nThe first line of the input contains a single integer T, the number of test cases (no more than 5). Each test case is described as follows. The first line contains two integers N and M (2 \xe2\x89\xa4 N \xe2\x89\xa4 50000, 1 \xe2\x89\xa4 M \xe2\x89\xa4 50000), the number of vertices in the tree and the number of queries, respectively. N-1 lines follow, describing the edges of the tree. The ith line contains two integers Xi and Yi (1 \xe2\x89\xa4 Xi, Yi \xe2\x89\xa4 N, Xi \xe2\x89\xa0 Yi), the indices of the vertices connected by the ith edge. Then M lines follow, describing the queries. The ith line contains an integer Ki (2 \xe2\x89\xa4 Ki \xe2\x89\xa4 N) followed by Ki distinct integers Ai, j (1 \xe2\x89\xa4 Ai, j \xe2\x89\xa4 N), the indices of the vertices in the ith query.\nIt is guaranteed that the given graph is a tree in all the test cases. The sum of all Ki in each test case doesn't exceed 100000.\nOutput\nFor each test case output M lines containing a single integer each -- the answer to the corresponding query from the input.\nExample\nInput:\n1\n5 3\n1 2\n1 3\n1 4\n4 5\n2 2 5\n3 2 3 4\n3 1 3 5\nOutput:\n2\n1\n0\n\nExplanation\nIn the first query, vertex 1 is such a vertex. If you remove vertex 1 and all the edges that connect 1 to other vertices, then vertices 2 and 5 will belong to separate connected components. Similarly, vertex 4 is also valid.\nIn the second query, vertex 1 is the only valid vertex. If you remove vertex 1 and all the edges that connect 1 to other vertices, then the connected components will be {2}, {3} and {4, 5}. It's easy to see that vertices 2 and 3 will belong to separate components, vertices 3 and 4 will belong to separate components, and vertices 2 and 4 will belong to separate components.\nIn the third query, you cannot remove a single vertex from the set {2, 4} (and the corresponding edges) so that any pair of vertices from the set {1, 3, 5} will be in separate connected components."