b'Problem\nUneori \xc3\xaemi spun: am s\xc4\x83 mor\nat\xc3\xa2t de singuratec\xc4\x83-n mijlocul lor;\nlimba simpl\xc4\x83 a bucuriilor n-am \xc3\xaenv\xc3\xa2\xc8\x9bat;\nam s\xc4\x83 mor ca o pas\xc4\x83re care prea mult a zburat,\ndar n-a f\xc4\x83cut cuib nic\xc4\x83ieri.\n\xe2\x80\x95 Oamenii ma uimesc, Magda Isafost\n\nAs of writing the informal statement, the winter just came and the statement was in season. Now, it is not winter anymore, so here is the formal statement instead:\nYou are given a connected graph with NNN nodes and MMM edges. You are given QQQ queries of the following types:\n\n1\xc2\xa0u\\texttt{1 u}1\xc2\xa0u: Given node uuu (1\xe2\x89\xa4u\xe2\x89\xa4N)(1 \\leq u \\leq N)(1\xe2\x89\xa4u\xe2\x89\xa4N), set the state of the node uuu to frozen.\n2\xc2\xa0t\\texttt{2 t}2\xc2\xa0t: Given ttt, let ttt units of time pass by.\n3\xc2\xa0v\\texttt{3 v}3\xc2\xa0v: Given node vvv (1\xe2\x89\xa4v\xe2\x89\xa4N)(1 \\leq v \\leq N)(1\xe2\x89\xa4v\xe2\x89\xa4N), answer if node vvv is currently frozen.\n\nInitially, no node is frozen.\nThe graph has the following property:\n\nIf, at time TTT, a node uuu is frozen, then, at time (T+1)(T+1)(T+1), all neighbours of uuu become frozen.\n\nFor each query of type 333, answer whether the node is currently frozen.\nNote:\n\nIf a node is already frozen, it remains unaffected after a type 111 query.\nIf, for a frozen node uuu, a neighbour vvv of node uuu is frozen at time TTT, node vvv remains unaffected at time (T+1)(T+1)(T+1).\n\nInput Format\n\nThe first line of input contains three integers N,M,N, M,N,M, and QQQ.\nMMM lines follow, the ithi^{th}ith of which contains two integers uiu_iui\xe2\x80\x8b and viv_ivi\xe2\x80\x8b, representing there is an edge between nodes uiu_iui\xe2\x80\x8b and viv_ivi\xe2\x80\x8b.\nThen, QQQ lines follow, the jthj^{th}jth of which contains two integers typejtype_jtypej\xe2\x80\x8b and xjx_jxj\xe2\x80\x8b.\nIf typejtype_jtypej\xe2\x80\x8b is 111 or 222, it indicates that you must effectuate an update of the type typejtype_jtypej\xe2\x80\x8b with parameter xjx_jxj\xe2\x80\x8b. Otherwise, answer the query with parameter xjx_jxj\xe2\x80\x8b\n\nOutput Format\nFor each query of type 333, print YES\\texttt{YES}YES if the queried node is frozen. Otherwise, print NO\\texttt{NO}NO.\nYou may print each character of the string in uppercase or lowercase (for example, the strings YeS\\texttt{YeS}YeS, yEs\\texttt{yEs}yEs, yes\\texttt{yes}yes and YES\\texttt{YES}YES will all be treated as identical).\nConstraints\n\n\n1\xe2\x89\xa4N,Q\xe2\x89\xa41051 \\le N, Q \\le 10^51\xe2\x89\xa4N,Q\xe2\x89\xa4105\n1\xe2\x89\xa4M\xe2\x89\xa43\xe2\x8b\x851051 \\le M \\le 3 \\cdot 10^51\xe2\x89\xa4M\xe2\x89\xa43\xe2\x8b\x85105\n1\xe2\x89\xa4ui,vi\xe2\x89\xa4N1 \\le u_i, v_i \\le N1\xe2\x89\xa4ui\xe2\x80\x8b,vi\xe2\x80\x8b\xe2\x89\xa4N\n1\xe2\x89\xa4typej\xe2\x89\xa431 \\le type_j \\le 31\xe2\x89\xa4typej\xe2\x80\x8b\xe2\x89\xa43\n1\xe2\x89\xa4xj\xe2\x89\xa4N1 \\le x_j \\le N1\xe2\x89\xa4xj\xe2\x80\x8b\xe2\x89\xa4N, if the query type is 111 or 333.\n1\xe2\x89\xa4xj\xe2\x89\xa41091 \\le x_j \\le 10^91\xe2\x89\xa4xj\xe2\x80\x8b\xe2\x89\xa4109, if the query type is 222.\n\n\nSubtasks\n\n\nSubtask 1 (10 points): 1\xe2\x89\xa4N\xe2\x89\xa41000,1\xe2\x89\xa4Q\xe2\x89\xa42000,1\xe2\x89\xa4M\xe2\x89\xa430001 \\le N \\le 1000, 1 \\le Q \\le 2000, 1 \\le M \\le 30001\xe2\x89\xa4N\xe2\x89\xa41000,1\xe2\x89\xa4Q\xe2\x89\xa42000,1\xe2\x89\xa4M\xe2\x89\xa43000.\nSubtask 2 (30 points): Each node in the given graph has at most two neighbours.\nSubtask 3 (60 points): Original constraints.\n\n\nSample 1:\nInputOutput6 6 6\n1 2\n2 3\n4 1\n5 4\n6 1\n6 5\n1 1\n3 1\n1 5\n2 1\n3 4\n3 3YES\nYES\nNO\nExplanation:\nTest Case 111: The graph looks like:\n\n\nQuery 111: Freeze the node 111. The graph looks like:\n\nQuery 222: Find the status of node 111. Since node 111 is frozen, we print YES\\texttt{YES}YES.\nQuery 333: Freeze the node 555. The graph looks like:\n\nQuery 444: 111 unit of time passes. Before this, nodes 111 and 555 were frozen.\nAfter 111 second, all the neighbours of node 111, i.e., nodes 2,4,2, 4,2,4, and 666, and all the neighbours of node 555, i.e., nodes 444 and 666 are frozen.\nThus, after this query, the frozen nodes in the graph are 1,2,4,5,1, 2, 4, 5,1,2,4,5, and 666. The graph looks like:\n\nQuery 555: Find the status of node 444. Since node 444 is frozen, we print YES\\texttt{YES}YES.\nQuery 666: Find the status of node 333. Since node 333 is not frozen, we print NO\\texttt{NO}NO.\n'