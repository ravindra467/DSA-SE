b"Problem\nChef hates unoptimized codes and people who write such codes. One fine day he decided to look through the kitchen's codebase and found a function whose pseudo-code is given here:\ninput: integer N, list X[1, 2, ..., N], list Y[1, 2, ..., N]\noutput: integer res\nfunction:\nset res = 0;\nfor i := 1 to N do\nfor j := 1 to N do\nfor k := 1 to N do\nif (X[i] = X[j]) OR (X[j] = X[k]) OR (X[k] = X[i])\ncontinue\nelse\nset res = max(res, Y[i] + Y[j] + Y[k])\nreturn res\n\n\nLuckily enough this code gets triggered only if the Head Chef makes a submission. But still there is a possibility that this can crash the judge. So help Chef by writing a new function which does the same thing but is faster.\nInput\n\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains an integer N denoting the number of elements in the two lists.\nThe i-th of the next N lines contains a pair of space-separated integers denoting the values of X[i] and Y[i] respectively.\n\nOutput\nFor each test case, output an integer corresponding to the return value of the function.\nConstraints\n\n1 \xe2\x89\xa4 T \xe2\x89\xa4 10\n1 \xe2\x89\xa4 N \xe2\x89\xa4 105\n1 \xe2\x89\xa4 X[i], Y[i] \xe2\x89\xa4 108\n\nExample\nInput\n2\n3\n1 3\n3 1\n1 2\n5\n1 3\n2 4\n1 2\n3 2\n3 4\nOutput\n0\n11\n\nExplanation\nTestcase 2: The maximum is attained when i = 1, j = 2 and k = 5. This leads to res being 3 + 4 + 4 = 11. This value is attained in other iterations as well, but it never exceeds this, and hence this is the answer."