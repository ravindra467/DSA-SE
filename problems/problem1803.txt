b"Problem\nLaxman is doing Diwali shopping. There are N shops numbered from 1 to N. Laxman wants to buy M different types of crackers. Crackers are numbered from 1 to M. Each shop sells many types of crackers. Laxman is currently at the i'th shop. Laxman want to find j and k, such that j <= i and k >= i and he can buy all M types of crackers only by visiting shops in the range of j to k. If there are multiple valid j, k, he then want to minimize the window size, that is, minimize the value of k - j. If there are still multiple valid j, k, then he wants to minimize the value of j. It is also known that, by visiting all the N shops, Laxman can surely buy all M types of crackers.\nWrite a program to output j, k values for all valid i.\nInput\nThe first line of the input contains an integer T denoting the number of test cases. Each test case is described as follows,\nFirst line of each test case has 2 integers, N and M. Following N lines describe the shops.\nEach of the N lines starts with an integer X, which denotes the number of different types of crackers sold in that shop. X integers follow describing the cracker types. All the X integers are different.\nOutput\nFor each test case output N lines, One for each i, 1 <= i <= N. Each line should contain two integers, j and k.\nConstraints\n\n1 \xe2\x89\xa4 T \xe2\x89\xa4 10000\n1 \xe2\x89\xa4 N \xe2\x89\xa4 100000\n1 \xe2\x89\xa4 M \xe2\x89\xa4 100000\n0 \xe2\x89\xa4 X \xe2\x89\xa4 100000\n1 \xe2\x89\xa4 Sum of N over all test cases \xe2\x89\xa4 500000\n1 \xe2\x89\xa4 Sum of M over all test cases \xe2\x89\xa4 500000\n1 \xe2\x89\xa4 Sum of X over all test cases \xe2\x89\xa4 500000\n\nExample\nInput:\n2\n3 3\n1 1\n1 2\n1 3\n3 3\n1 1\n2 2 3\n1 1\nOutput:\n1 3\n1 3\n1 3\n1 2\n1 2\n2 3\nExplanation\nTest case #1:\nLaxman needs to visit all 3 shops to but all M types\n\nTest case #2:\nLaxman needs to visit shops 1, 2 to get all M types. Or he can visit shops 2, 3 to get all M types.\nFor i = 2, we could have bought all types from shops 2 3, but we prefer 1 2 because 1 < 2, as stated in the statement we want to minimize j in case of tie.\n"